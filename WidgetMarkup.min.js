////////////////////////////////////////////////////////////////////////////////////
// {</>} WidgetMarkup - Simple implementation of markup for Scriptable iOS widgets.
// COPY THIS SCRIPT TO YOUR WIDGET FILE.
////////////////////////////////////////////////////////////////////////////////////
// Version 1.1.20221122
const WidgetMarkup=(()=>{function t(t){if(t&&t.constructor&&t.constructor.toString){let e=t.constructor.toString().match(/function\s*(\w+)/);if(e&&2==e.length)return e[1]}}function e(e,n){return Object.keys(n).forEach((r=>{if(-1!==r.indexOf("*")){if(!((r=r.replace("*",""))in e))throw new Error(`Method "${r}()" is not applicable to instance of ${t(e)}`);Array.isArray(n["*"+r])?e[r](...n["*"+r]):e[r](n[r])}else{if(!(r in e))throw new Error(`Property "${r}" is not applicable to instance of ${t(e)}`);e[r]=n[r]}})),e}function n(t,o){return o.forEach((o=>{if("text"===o.tag){const n=/(\$\$\[.+\])/gi;n.test(o.textContent)&&(o.textContent=o.textContent.replace(n,((t,e)=>a[e].toString())));let i=t.addText(o.textContent.replace(/&apos;/g,"'").replace(/&quot;/g,'"').replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/&amp;/g,"&"));e(i,r(o.attributes,"styles")),e(i,r(o.attributes,"attr"))}else if("spacer"===o.tag){let e=parseInt(r(o.attributes,"value"),10);e<1||isNaN(e)?t.addSpacer():t.addSpacer(e)}else if("image"===o.tag){let n=t.addImage(r(o.attributes,"src"));e(n,r(o.attributes,"styles")),e(n,r(o.attributes,"attr"))}else if("date"===o.tag){let n=t.addDate(r(o.attributes,"value"));e(n,r(o.attributes,"styles")),e(n,r(o.attributes,"attr"))}else if("stack"===o.tag){let a=t.addStack();e(a,r(o.attributes,"styles")),e(a,r(o.attributes,"attr")),n(a,o.children)}else if(-1!==["hstack","vstack"].indexOf(o.tag)){let a=t.addStack();a["hstack"===o.tag?"layoutHorizontally":"layoutVertically"](),e(a,r(o.attributes,"styles")),e(a,r(o.attributes,"attr")),n(a,o.children)}})),t}function r(t=[],e="styles"){let n={};return t.forEach((t=>{t.name.toLowerCase()===e.toLowerCase()&&(n=void 0!==a[t.value]?a[t.value]:t.value)})),n}const a={};function o(t,e){let n="";return t.forEach(((t,r)=>{if(e[r])if(Array.isArray(e[r])&&(e[r]=e[r].join("")),"string"==typeof e[r])n+=t+e[r];else{let o="$$["+UUID.string()+Math.floor(20*Math.random())+"]";a[o]=e[r],n+=t+o}else n+=t})),n}return{widgetMarkup:async function(t,...a){let i=o(t,a),l=await async function(t){const e=new WebView;await e.loadHTML("<html></html>");const n=`\n        var getAttributes = function (attributes) {\n            return Array.prototype.map.call(attributes, function (attribute) {\n                return {\n                    name: attribute.name,\n                    value: attribute.value\n                };\n            });\n        };\n        \n        var createDOMMap = function (element) {\n            return Array.prototype.map.call(element.childNodes, (function (node) {\n                if (node.nodeType !== 3 && node.nodeType !== 8) {\n                    var details = {\n                        tag: node.tagName.toLowerCase(),\n                        textContent: node.textContent,\n                        attributes: node.nodeType !== 1 ? [] : getAttributes(node.attributes)\n                    };\n                    details.children = createDOMMap(node);\n                    return details;\n                }\n                return null;\n            })).filter((e) => e !== null);\n        };\n        \n        function getDom() {\n            let htmlStr = '${t=`<tabom>${t=function(t){return(t=t.replace(/(\r\n|\n|\r)/gm,"")).replace(/<\s*text[^>]*>(.*?)<\s*\/\s*text>/gi,((t,e)=>t.replace(e,e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"))))}(t)}</tabom>`}';\n            const dom = new DOMParser();\n            let doc = dom.parseFromString(htmlStr, 'application/xml');\n            return JSON.stringify(createDOMMap(doc.documentElement));\n        }\n        try {\n            completion(getDom());\n        }\n        catch (err) {\n            completion([{\n                tag: 'error',\n                textContent: err.message\n            }]);\n        }    \n      `;let r=await e.evaluateJavaScript(n,!0);const a=JSON.parse(r);if(a.length&&-1!==a[0].tag.toLocaleLowerCase().indexOf("error"))throw new Error(a[0].textContent);return a}(i);const s=l[0];if(void 0===s)throw new Error("WidgetMarkup requires that the <widget> element be the parent element of your widget.");const c=s.children,u=new ListWidget;return e(u,r(s.attributes,"styles")),e(u,r(s.attributes,"attr")),n(u,c),u},concatMarkup:function(t,...e){return o(t,e)}}})();
